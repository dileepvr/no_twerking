- DILEEP -

This session was largely headed by me, and had a lecture format. It was on IP routing, and the physical layer of the internet. I learnt more subsequent information from talking to a graduate student from the CS department (Reza Motamedi) later in the week. He was helpful, and also recommended a book ("Tubes: A Journey to the Center of the Internet" by Andrew Blum).


First, I recaped how the routing table can be viewed. Possible ways are:

"netstat -nr"
"route -n"
"ip route"

The "route" command should be cross platform (not linux specific).
Typical output for a computer connected to the UOethernet looks like this:

  Kernel IP routing table
  Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
  0.0.0.0         128.223.130.1   0.0.0.0         UG    202    0        0 enp0s10
  128.223.130.0   0.0.0.0         255.255.254.0   U     202    0        0 enp0s10


Everytime the kernel receives a packet not meant for itself, it ANDs the destination with the Genmask, and checks if the output matches the "Destination column" ip. It takes the biggest (longest) matching destination row, and sends it to that gateway on the correct interface. The flags have meaning (U is up, G is actual gateway machine). Metric is the path length (hopping) measure.

The Iface column is the interface column (in this case, physical ethernet port) on which the packet is meant to be sent out. There can be virtual interfaces (like taps and tunnels). See networking exercises on "Linux the hard way" for more on taps. A tunnel interface could be setup if we want to route all our traffic through a VPN server.

I soldered leads onto the serial interface headers of a home router (DIR-601) and logged into its busybox linux shell wihtout credentials using "screen". Then showed that its routing table had interface names for each of the ethernet ports, as well as the wifi port. The table showed (once connected to UOethernet) how it basically routes packets when it isn't a leaf node (like end clients are).

Kernel doesn't always refer to routing table. It first refers to routing cache to see if recent activity matches conditions. Non-leaf nodes have multiple routing tables, and a way to choose between them, based on changes in traffic density, and other special messages received from other nodes. There are unorthodox routing rules, like drop, return with error, or ignore. A router can choose to lie to the source as well.

This document http://pages.cs.wisc.edu/~pb/tubes_final.pdf gives a good overview of the physical connections between different locations. All long distance links are fiber-optics (its cheaper). Short distance links can be coaxial cables (think phone lines). The really long-haul fiber optics (like the undersea links across continents) must be driven by stable laser systems using Quadrature Amplitude Modulation (QAM).

The best way to explain how the internet works is to use a top-down example.

Consider a single company (like AT&T), owning a whole bunch of linux servers in different locations across the US, all connected in a physical mesh network. We can call this an Autonomous System (AS). There are a bunch of IP addresses in an open registry somewhere which are "assigned" to AT&T. So AT&T can setup all the routing tables on all of its servers to follow certain routing rules for what to do with a packet with a specific destination IP boucing around its network. So AT&T can choose to tie certain IP ranges to certain geographical locations, and it can also change them on a whim. There are protocols to communicate this sort of change to all routing tables automatically. In case of a single AS, it is done through IGP (internal gateway protocol). Note that a single physical computer can be reached by multiple IP addresses based on path. AT&T can choose to route things that way.

Consider a separate big enterprise company (like Verizon), also owning a whole bunch of linux servers in different locations across the US. Their AS has also been assigned a nonoverlapping range of IP addresses from the public registry. And they have a similar routing system setup. If their AS receives a packet whose destination IP is in the AT&T list, then it is first sent over to a border gateway, where it will be handed over to an AT&T border gateway of the relevant AS. For this to happen, typically, AT&T and Verizon get together and buy a building, called a colocation data center, and put their border gateway servers right next to each other. Sometimes, these buildings are owned by other companies (like Equinix) that lease out space for gateways to other companies. Whenever AT&T changes some IP geography assignments inside its AS, it needs to let Verizon AS know so the optimum path will be chosen. This is done through iBGP or eBGP (internal or external border gateway protocol). There are specific network packets that only advertise new IP range assignments and changes, that are used to update routing table (and possibly pass the message on to other gateways). Its all seamless and continuously updated.

Now a smaller company wants to be an ISP for Eugene. So it can pay AT&T and buy an IP range, which it can dynamically or statically assign to its customers. They might need to put up at least one machine at a data center next to an AT&T gateway and run physical lines all over the place. To handle all the IP assignments at local, regional, and global levels, all the industries got together and put together a non-profit registry mechanism (ICANN, IANA, ARIN, etc.) and streamlined a bureaucratic framework for smooth functioning. It also maintains AS numbers (every AS has a number).

To qualify as an AS, there has to be more than one way to reach the AS. An AS can never be a leaf. Uoregon subscribes to a small AS called Nero, which has its gateway in a colocation center in portland, where it can route stuff to other Nero gateways, or hand it over one level up to its parent AS, owned by Mindtree. This is way, traceroute always hops through portland IPs. Uoregon has a backup subscription from another company, so technically, there are two ways to reach Uonet. So it is an AS.

Besides colocation centers, there are also IPX (IP exchange) centers. When ever your AS gets a packet with a destination outside your range, you generally have to pass it one level upward (unless you are one of the big guys), which will then pass it on to another smaller company AS. Both you and the smaller company AS now pays for routing that data through the big guy's infrastructure. If Uoregon, and NCU (say) both subscribe to Nero. If there is a lot of data passing between the two of you, its all passing through Nero's AS, and you are both paying Nero. Upon discovering this, both UO and NCU can get together and decide to lay a direct physical line bypassing the upper layer, and save money. This sort of thing occurs at all levels all the way up. Sometimes, when someone's price changes, some lines become uneconomical.

Routing is also sensitive to traffic conditions. I don't know if ASs' share internal traffic data to other ASs', resulting in sometimes suboptimal routing.

There are only about 13 big AS owners in the US. All private. Goverment owned ASs exist in regimes where censorship/surveillance is deemed necessary. The BGP ip advertising is completely unverified and insecure, and bad data can mess up a network. But the network heals once the offending party stops its shit. Pakistan once made youtube inaccessible in its country by advertising bad IP routing data to a bunch of ASs'. There is some limited implementation of secure BGP (using packet signing, and public keys for verification), but its slow to pick up.

Basically, no one owns the internet, but someone owns, operates, and maintains all the physical stuff. There is a business interest to keep the internet open and accessible. But rates (price and speed) are adjustable and can be used for leaverage in business transactions. This is why net neutrality is a topic. The US government has classified internet as a public utility (like electricity), which limits what companies can do with it.
